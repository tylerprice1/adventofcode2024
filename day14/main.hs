import Control.Monad (void)
import Data.Char (isDigit)
import Data.List (groupBy, sortBy)
import Data.Map qualified as Map
import Data.Maybe (fromMaybe, isJust, mapMaybe)
import Data.Set qualified as Set
import Debug.Trace (trace, traceShow, traceShowId)
import Text.Parsec (char, digit, many1, optionMaybe, parse, string)
import Text.Parsec.String (Parser)

type X = Int

type Y = Int

data Coordinate = Coordinate {x :: X, y :: Y}
  deriving (Eq)

instance Ord Coordinate where
  compare a b = case compare (x a) (x b) of
    EQ -> compare (y a) (y b)
    comp -> comp

instance Show Coordinate where
  show c = "(" ++ show (x c) ++ ", " ++ show (y c) ++ ")"

type Position = Coordinate

type Velocity = Coordinate

data Robot = Robot {position :: Position, velocity :: Velocity}
  deriving (Eq, Ord, Show)

showSpace width height robots =
  let midY = (height `div` 2)
      midX = (width `div` 2)
      positionMap = Map.fromList (map (\r -> (position r, r)) robots)
   in [ [ if Coordinate x y `Map.member` positionMap
            then 'R'
            else '.'
          | x <- [0 .. width - 1]
        ]
        | y <- [0 .. height - 1]
      ]

getQuadrant :: X -> Y -> Robot -> Maybe Int
getQuadrant width height robot =
  let midY = (height `div` 2)
      midX = (width `div` 2)
      p = position robot
      cmpX = compare (x p) midX
      cmpY = compare (y p) midY
   in case cmpX of
        EQ -> Nothing
        LT -> if cmpY == LT then Just 1 else if cmpY == GT then Just 3 else Nothing
        GT -> if cmpY == LT then Just 2 else if cmpY == GT then Just 4 else Nothing

advance :: Int -> Int -> Int -> Robot -> Robot
advance width height n (Robot p v) =
  let x' = (x p + n * x v) `mod` width
      y' = (y p + n * y v) `mod` height
   in Robot (Coordinate x' y') v

advanceAll width height n = map (advance width height n)

part1 input width height n = product (map length groupedByQuadrant)
  where
    finalRobots = map (advance width height n) input
    robotQuadrants = mapMaybe (\r -> (\q -> Just (r, q)) =<< getQuadrant width height r) finalRobots
    groupedByQuadrant =
      groupBy
        (\(a, aQuad) (b, bQuad) -> aQuad == bQuad)
        (sortBy (\(a, aQuad) (b, bQuad) -> compare aQuad bQuad) robotQuadrants)

-- part2 input width height = head (dropWhile (\(n, rs) -> showSpace width height rs /= expected) (map (\n -> (n, advanceAll width height n input)) [1 ..]))
--   where
--     expected =
--       [ ".....................................................................................R...............",
--         ".......R.....................................................................R.......................",
--         "............R....R...................................................................................",
--         "......................................................R.R....................................R.......",
--         "......R..............................................................................................",
--         ".....................................................................................................",
--         ".....................................................................................................",
--         "......R..............................................................................................",
--         ".....................................................................................................",
--         "........................................R..............................R...................R.........",
--         ".....................................................................................................",
--         ".....................................................................................................",
--         "................R................R...................................................................",
--         ".....................................................................................................",
--         "...............................................RR..................................................R.",
--         "......................R........R...........R.........................................................",
--         "..............................................................................R......................",
--         ".....................................................................................................",
--         ".............................................................R.......................................",
--         "...............................................................R.....................................",
--         "...............................................R......R..............................................",
--         "...........................................................................................R.........",
--         "........................................................................................R...........R",
--         ".....................................................................................................",
--         "..................................................................................................R..",
--         ".........................................................................R................R.R........",
--         ".........................R.............R.............................................................",
--         "..........................................................................R..........................",
--         "...........................................................R.....................R...................",
--         "..............................R......................................................................",
--         ".............................R...................................................R.......R...........",
--         "..............................................................................R...R..................",
--         ".....................................................................................................",
--         ".....................................................................................................",
--         "............................................R...........R..................R.........................",
--         ".R................R.....................................................................R............",
--         "............R.........R..............................................................................",
--         ".....................................R......................R........................................",
--         "...........................................................................................R.........",
--         "......R..........R...................................................................................",
--         ".......R.........R............................R..................................R.............R.....",
--         "........................................................................R............................",
--         "..................RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR....................................................",
--         "..................R.............................R..........................R.........................",
--         "..................R.............................R....................................................",
--         "............R.....R.............................R....................................................",
--         "..................R.............................R................................R...................",
--         "..................R..............R..............R....................................................",
--         "........R.........R.............RRR.............R...........R.............R..........................",
--         "..................R............RRRRR............R......................................R.............",
--         "..................R...........RRRRRRR...........R................................................R...",
--         "..................R..........RRRRRRRRR..........R.......................R............................",
--         "..................R............RRRRR............R.................................R..................",
--         "..................R...........RRRRRRR...........R......R.............................................",
--         "..................R..........RRRRRRRRR..........R.............................R.................R....",
--         ".R................R.........RRRRRRRRRRR.........R......R......................................R......",
--         "...R..............R........RRRRRRRRRRRRR........R....................................................",
--         "..................R..........RRRRRRRRR..........R....................................................",
--         "..R...............R.........RRRRRRRRRRR.........R....................................................",
--         "..................R........RRRRRRRRRRRRR........R............................R.......................",
--         "..R...............R.......RRRRRRRRRRRRRRR.......R....................................................",
--         "..................R......RRRRRRRRRRRRRRRRR......R....................................................",
--         "..................R........RRRRRRRRRRRRR........R...........................R........................",
--         "..................R.......RRRRRRRRRRRRRRR.......R...................R................................",
--         "..................R......RRRRRRRRRRRRRRRRR......R..................R.................................",
--         "..................R.....RRRRRRRRRRRRRRRRRRR.....R...........R........................................",
--         "..................R....RRRRRRRRRRRRRRRRRRRRR....R.R...............R..................................",
--         "..................R.............RRR.............R....................................................",
--         "..R..R............R.............RRR.............R................................................R...",
--         "R.................R.............RRR.............R.......R......R.........R...........................",
--         "..................R.............................R....................................................",
--         "..................R.............................R................................................RR..",
--         "..................R.............................R.................................R.........R........",
--         "..................R.............................R....................................................",
--         "..................RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR.....................................R..............",
--         ".....................................................................................................",
--         "......R...............R............................R.................................................",
--         "..........................................................R......................................R...",
--         "....................................................................................R................",
--         "............................................R..........................................R.............",
--         "....R................................................................................................",
--         ".....................................................................................R...............",
--         "............................R.........RR.............................R...............................",
--         ".....................................................................................................",
--         ".....................................................................................................",
--         "...........................R.........................................................................",
--         "...........R................................................................................R........",
--         "..............................R..............................R...........R.......................R...",
--         ".......R.........R...........R.......................R...............................................",
--         "........R............................................................................................",
--         ".................R.............................................................R.....................",
--         "...................................................R.................................................",
--         ".....................................................................................................",
--         ".................................................R...................................................",
--         "...................................................................................R.................",
--         "..................R........................................R.........................................",
--         "........................................................R............................................",
--         "......................................R............R....................R.........................R..",
--         "..................................R....................................R.............................",
--         "................R....................................................................R............R..",
--         "..........R..........................................................................................",
--         ".....................................................................................................",
--         "...R.........................................................R......................................."
--       ]

part2 input width height = eternity
  where
    eternity = map (\n -> advanceAll width height n input) [1 ..]

-- part2 input width height = unique eternity Set.empty
--   where
--     eternity = map (\n -> advanceAll width height n input) [1 ..]
--     unique (rs : rest) u = if rs `Set.member` u then rs : Set.toList u else unique rest (rs `Set.insert` u)

processInput :: String -> [Robot]
processInput contents = map parseRobot (lines contents)
  where
    parseRobot :: String -> Robot
    parseRobot line = case parse robotParser "" line of
      Left _ -> error "Error"
      Right r -> r

    intParser :: Parser Int
    intParser = do
      neg <- optionMaybe (char '-')
      str <- many1 digit
      let positive = read str :: Int
      return (maybe positive (const (-positive)) neg)

    coordinateParser :: Parser Coordinate
    coordinateParser = do
      x <- intParser
      void $ char ','
      Coordinate x <$> intParser

    robotParser :: Parser Robot
    robotParser = do
      void $ string "p="
      position <- coordinateParser
      void $ char ' '
      void $ string "v="
      Robot position <$> coordinateParser

main = do
  testFile <- readFile "./test.txt"
  let test = processInput testFile

  inputFile <- readFile "./input.txt"
  let input = processInput inputFile

  putStrLn "\n----- Part 1 -----"
  -- print (part1 test 11 7 100) -- Expected: 12
  -- print (part1 input 101 103 100) -- Expected: 222062148
  putStrLn "\n----- Part 2 -----"
  mapM_
    (mapM_ putStrLn . (\(rs, i) -> "" : show i : showSpace 101 103 rs))
    (take 1 (drop 7519 (zip (part2 input 101 103) [1 ..]))) -- Expected: 7520
